[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "sentiment-analysis-system"
version = "1.0.0"
description = "A comprehensive sentiment analysis system for audio files using speech-to-text and NLP models"
authors = [
    {name = "Sentiment Analysis Team", email = "team@example.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.12"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Multimedia :: Sound/Audio :: Analysis",
]

dependencies = [
    # Core web framework
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    
    # Database
    "sqlalchemy>=2.0.0",
    
    # Configuration
    "pydantic>=2.0.0",
    "python-dotenv>=1.0.0",
    
    # Audio processing
    "librosa>=0.10.0",
    "soundfile>=0.12.0",
    "pydub>=0.25.0",
    "noisereduce>=3.0.0",
    
    # Speech-to-text
    "openai-whisper>=20231117",
    
    # Machine learning
    "torch>=2.0.0,<2.7.0",
    "transformers>=4.35.0",
    "numpy>=1.24.0",
    
    # Sentiment analysis
    "textblob>=0.17.0",
    "vaderSentiment>=3.3.0",
    
    # Dashboard
    "streamlit>=1.28.0",
    "plotly>=5.17.0",
    "pandas>=2.0.0",
    
    # HTTP client
    "requests>=2.31.0",
    
    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    
    # Documentation
    "pypandoc>=1.15",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
]

docker = [
    "gunicorn>=21.0.0",
]

[project.scripts]
sentiment-analysis = "main:main"

[project.urls]
Homepage = "https://github.com/example/sentiment-analysis-system"
Repository = "https://github.com/example/sentiment-analysis-system"
Documentation = "https://github.com/example/sentiment-analysis-system#readme"

[tool.hatch.build.targets.wheel]
packages = ["app"]

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["app"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 